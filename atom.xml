<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>介草稻</title>
  
  <subtitle>悲しみは叩き割るたび増えていく</subtitle>
  <link href="http://caffptrx.github.io/atom.xml" rel="self"/>
  
  <link href="http://caffptrx.github.io/"/>
  <updated>2023-03-02T13:44:51.509Z</updated>
  <id>http://caffptrx.github.io/</id>
  
  <author>
    <name>介草稻</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动元胞机</title>
    <link href="http://caffptrx.github.io/2023/02/27/cellular-automata/"/>
    <id>http://caffptrx.github.io/2023/02/27/cellular-automata/</id>
    <published>2023-02-27T14:57:29.000Z</published>
    <updated>2023-03-02T13:44:51.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原题来自于中国地质大学。</p></blockquote><h2 id="题目概括"><a href="#题目概括" class="headerlink" title="题目概括"></a>题目概括</h2><p>在 $N*N$ 的棋盘中，每个格子都可以看成是一个生命体，每个生命体的生死遵循以下规则:</p><ol><li>如果一个细胞周围有 3 个细胞为生，则该细胞为生；</li><li>如果一个细胞周围有 2 个细胞为生，则该细胞的生死状态保持不变；</li><li>在其它情况下，该细胞为死。<br>请让玩家输入棋盘大小与初始存活概率，用 * 和（空格）表达生与死，并输出每一轮迭代后的图像。<span id="more"></span></li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用若干个函数分解功能，在这我用 init() 初始化棋盘，print_screen() 打印棋盘，get_nearby_cells_count() 处理每个格子相邻生命体存活的计算，最后利用 update() 更新状态。<br>对于 init() 来说，只要注意嵌套关系与 life_prob 的计算方式就行。<br>print_screen() 更简单了，我用了 | 来美化棋盘格。<br>get_nearby_cells_count() 才是重头戏，先将棋盘作为参数传入，计算宽和高，利用$(i, j)$表示每个棋盘格的位置，再判断其是否在边缘 (30-39)，最后计算相邻。</p><p>update() 用 deepcopy() 复制一份 screen (防止某些特殊情况出现)，根据 get_nearby_cells_count() 计算的结果更新棋盘格。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">life_prob</span>):</span><br><span class="line">    outlayer, inlayer = [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            <span class="keyword">if</span> random.random() &gt; life_prob:</span><br><span class="line">                inlayer.append(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inlayer.append(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        outlayer.append(inlayer)</span><br><span class="line">        inlayer = []</span><br><span class="line">    <span class="keyword">return</span> outlayer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_screen</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> screen:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;|&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">print</span>(j, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;|&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_nearby_cells_count</span>(<span class="params">screen, i, j</span>):</span><br><span class="line">    w, h, count = <span class="built_in">len</span>(screen[<span class="number">0</span>]) - <span class="number">1</span>, <span class="built_in">len</span>(screen) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    i, j = i - <span class="number">1</span>, j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    top_exist, bottom_exist, left_exist, right_exist = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否在棋盘边界上</span></span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        top_exist = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &lt;= h:</span><br><span class="line">        bottom_exist = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">        left_exist = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> j + <span class="number">1</span> &lt;= w:</span><br><span class="line">        right_exist = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> top_exist:</span><br><span class="line">        <span class="keyword">if</span> screen[i - <span class="number">1</span>][j] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left_exist:</span><br><span class="line">            <span class="keyword">if</span> screen[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> right_exist:</span><br><span class="line">            <span class="keyword">if</span> screen[i - <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> bottom_exist:</span><br><span class="line">        <span class="keyword">if</span> screen[i + <span class="number">1</span>][j] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left_exist:</span><br><span class="line">            <span class="keyword">if</span> screen[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> right_exist:</span><br><span class="line">            <span class="keyword">if</span> screen[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> left_exist:</span><br><span class="line">        <span class="keyword">if</span> screen[i][j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> right_exist:</span><br><span class="line">        <span class="keyword">if</span> screen[i][j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">screen</span>):</span><br><span class="line">    new_screen = copy.deepcopy(screen)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算相邻存活数量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, height + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, width + <span class="number">1</span>):</span><br><span class="line">            evi = get_nearby_cells_count(screen, i, j)</span><br><span class="line">            <span class="keyword">if</span> evi == <span class="number">3</span>:</span><br><span class="line">                new_screen[i - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> evi == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_screen[i - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_screen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;====元胞自动机====\n作者: caffx&#x27;</span>)</span><br><span class="line">height = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;高度: &quot;</span>))</span><br><span class="line">width = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;宽度: &quot;</span>))</span><br><span class="line">life_prob = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;空间中初始细胞存活概率(0.x): &quot;</span>))</span><br><span class="line">screen = init(life_prob)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第 %d 次迭代&quot;</span> % (count))</span><br><span class="line">    print_screen()</span><br><span class="line">    q = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> q == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        exit()</span><br><span class="line">    screen = update(screen)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原题来自于中国地质大学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目概括&quot;&gt;&lt;a href=&quot;#题目概括&quot; class=&quot;headerlink&quot; title=&quot;题目概括&quot;&gt;&lt;/a&gt;题目概括&lt;/h2&gt;&lt;p&gt;在 $N*N$ 的棋盘中，每个格子都可以看成是一个生命体，每个生命体的生死遵循以下规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个细胞周围有 3 个细胞为生，则该细胞为生；&lt;/li&gt;
&lt;li&gt;如果一个细胞周围有 2 个细胞为生，则该细胞的生死状态保持不变；&lt;/li&gt;
&lt;li&gt;在其它情况下，该细胞为死。&lt;br&gt;请让玩家输入棋盘大小与初始存活概率，用 * 和（空格）表达生与死，并输出每一轮迭代后的图像。</summary>
    
    
    
    <category term="杂项" scheme="http://caffptrx.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Python" scheme="http://caffptrx.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenAIE</title>
    <link href="http://caffptrx.github.io/2022/06/18/OpenAIE/"/>
    <id>http://caffptrx.github.io/2022/06/18/OpenAIE/</id>
    <published>2022-06-18T05:13:13.000Z</published>
    <updated>2022-06-18T06:52:13.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="板载按键"><a href="#板载按键" class="headerlink" title="板载按键"></a>板载按键</h1><p><em>板载两个用户按键 button1 和 button2，按键按下为低电平，弹起为高电平。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> button1, button2</span><br><span class="line">button1.is_press()</span><br><span class="line">button2.is_press()</span><br></pre></td></tr></table></figure><p>按键按下返回 True，按键弹起返回 False。</p><h1 id="板载无源蜂鸣器"><a href="#板载无源蜂鸣器" class="headerlink" title="板载无源蜂鸣器"></a>板载无源蜂鸣器</h1><p>可通过不同频率的信号驱动，发出不同音调的声音。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> buzzer</span><br><span class="line">buzzer.tone(freq)</span><br><span class="line">buzzer.no_tone()</span><br></pre></td></tr></table></figure><p>freq: 频率。</p><span id="more"></span><h1 id="板载-2-4-inch，240-320-显示屏。"><a href="#板载-2-4-inch，240-320-显示屏。" class="headerlink" title="板载 2.4-inch，240*320 显示屏。"></a>板载 2.4-inch，240*320 显示屏。</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lcd</span><br><span class="line">lcd.init()</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">lcd.clear(color)</span><br><span class="line"><span class="comment"># 清空显示</span></span><br><span class="line">lcd.rotation(r)</span><br><span class="line"><span class="comment"># 设置显示方向</span></span><br><span class="line">lcd.set_backlight(val)</span><br><span class="line"><span class="comment"># 设置背光亮度</span></span><br><span class="line">lcd.draw_string(x, y, string, fc=(r,g,b), bc=(r,g,b))</span><br><span class="line"><span class="comment"># 画字符</span></span><br><span class="line">lcd.draw_line(x0, y0, x1, y1, color=(r,g,b), thickness=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 画线</span></span><br><span class="line">lcd.draw_rectangle(x, y, w, h, color=(r,g,b), thickness=<span class="number">1</span>, fill=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">lcd.draw_circle(x, y, radius, color=(r,g,b), thickness=<span class="number">1</span>, fill=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">lcd.display()</span><br><span class="line"><span class="comment"># 显示</span></span><br></pre></td></tr></table></figure><p>r: 0-4。0、2为竖屏显示，320*240。1、3为横屏显示，240*320。<br>fc: 字体颜色，<br>bc: 背景颜色，<br>thickness: 线宽，<br>fill: 是否填充。</p><h1 id="LED灯"><a href="#LED灯" class="headerlink" title="LED灯"></a>LED灯</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> rgb_led</span><br><span class="line">rgb_led(port, num=<span class="number">3</span>)</span><br><span class="line">rgb_led.<span class="built_in">set</span>(<span class="built_in">id</span>, (r, g, b))</span><br><span class="line">rgb_led.display()</span><br></pre></td></tr></table></figure><p>num: 灯珠数量，<br>id：板载灯编号，<br><strong>rgb_led 是个类，需要初始化。</strong></p><h1 id="按键组"><a href="#按键组" class="headerlink" title="按键组"></a>按键组</h1><p><em>按键按下为低电平，弹起为高电平。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> button_group</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">button_group</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">button_group.is_press(index)</span><br></pre></td></tr></table></figure><h1 id="电位器"><a href="#电位器" class="headerlink" title="电位器"></a>电位器</h1><p>该模块为可调电阻，通过旋转旋钮可改变输出端与两端的阻值，从而改变输出端与两端之间的电压。 通过ADC（模数转换）外设可检测电压变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openair <span class="keyword">import</span> potentiometer</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">potentiometer</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">potentiometer.read()</span><br></pre></td></tr></table></figure><h1 id="超声波测距传感器"><a href="#超声波测距传感器" class="headerlink" title="超声波测距传感器"></a>超声波测距传感器</h1><p><em>量程：2-200cm，误差：±1%。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> ultrasonic</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ultrasonic</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">ultrasonic.measure()</span><br><span class="line">ultrasonic.read()</span><br></pre></td></tr></table></figure><p>回波信号不大于 100ms。</p><h1 id="温湿度传感器"><a href="#温湿度传感器" class="headerlink" title="温湿度传感器"></a>温湿度传感器</h1><p><em>温度测量范围：-40-85℃，误差：±0.3%。湿度测量范围：0-100%，误差：±2%。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> th_sensor</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">th_sensor</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">th_sensor.read_temperature()</span><br><span class="line">th_sensor.read_humidity()</span><br></pre></td></tr></table></figure><h1 id="可调速电机风扇"><a href="#可调速电机风扇" class="headerlink" title="可调速电机风扇"></a>可调速电机风扇</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> motor_fan</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">motor_fan</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">motor_fan.<span class="built_in">set</span>(val)</span><br></pre></td></tr></table></figure><p>val: 0-100。</p><h1 id="语音识别及交互模块"><a href="#语音识别及交互模块" class="headerlink" title="语音识别及交互模块"></a>语音识别及交互模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> asr</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">asr</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">asr.read()</span><br></pre></td></tr></table></figure><h1 id="AI-模块"><a href="#AI-模块" class="headerlink" title="AI 模块"></a>AI 模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> enlighten_com</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">enlighten_com</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">enlighten_com.wait_connect()</span><br><span class="line"><span class="comment"># 等待连接</span></span><br><span class="line">enlighten_com.set_mode(m)</span><br><span class="line"><span class="comment"># 设置模式</span></span><br><span class="line">enlighten_con.request_data(i)</span><br><span class="line"><span class="comment"># 请求数据</span></span><br><span class="line">enlighten_com.read_qrcode_info()</span><br><span class="line"><span class="comment"># 读取二维码扫描结果</span></span><br><span class="line">enlighten_com.read_blob_info()</span><br><span class="line"><span class="comment"># 读取色块信息</span></span><br><span class="line">enlighten_com.read_detect_info()</span><br><span class="line"><span class="comment"># 读取检测结果</span></span><br></pre></td></tr></table></figure><p><strong>m:</strong></p><ul><li>“qrcode scan”: 二维码扫描</li><li>“mask detect”: 口罩检测</li><li>“image class”：图像检测分类</li><li>“color recognition”: 颜色识别</li></ul><p><strong>i:</strong></p><ul><li>“qrcode”: 二维码信息</li><li>“mask detect”: 口罩检测结果</li><li>“image class”: 图像检测分类结果</li><li>“red blob”, “green blob”, “blue blob”: 红&#x2F;绿&#x2F;蓝色块</li></ul><p>read_blob_info: [x, y, w, h, pixels]<br>read_detect_info: [x, y, w, h, classid, confidence]</p><p>口罩检查模型的分类标签映射(label_map)<br>{0: ‘unmask’, 1: ‘mask’}<br>图像检测分类模型的分类标签映射(label_map)<br>{0:’airplane’,<br>1:’bicycle’,<br>2:’bird’,<br>3:’steamship’,<br>4:’bootle’,<br>5:’bus’,<br>6:’car’,<br>7:’cat’,<br>8:’cheer’,<br>9:’ox’,<br>10:’dining-table’,<br>11:’dog’,<br>12:’horse’,<br>13:’motobike’,<br>14:’person’,<br>15:’flowerpot’,<br>16:’sheep’,<br>17:’sofa’,<br>18:’train’,<br>19:’tetevision’}</p><h1 id="GPS-x2F-北斗双模定位导航模块"><a href="#GPS-x2F-北斗双模定位导航模块" class="headerlink" title="GPS&#x2F;北斗双模定位导航模块"></a>GPS&#x2F;北斗双模定位导航模块</h1><p><em>通信接口UART，默认波特率：9600，数据位8，停止位1。数据格式为 NEMA0183 标准，输出频率为1Hz。板载指示灯在定位成功时闪烁。定位精度10m，首次定位时间大于32秒。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> bds</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bds</span>(<span class="title class_ inherited__">port</span>)</span><br><span class="line">bds.update()</span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- Variables --</span></span><br><span class="line">bds.satellites_in_view <span class="comment"># 可见卫星数</span></span><br><span class="line">bds.satellites_in_use <span class="comment"># 使用卫星数</span></span><br><span class="line">bds.longitude[<span class="number">0</span>] <span class="comment"># 经度(float)</span></span><br><span class="line">bds.latitude[<span class="number">0</span>] <span class="comment"># 纬度(float)</span></span><br><span class="line">bds.altitude <span class="comment"># 海拔(m)</span></span><br><span class="line">bds.speed[<span class="number">2</span>] <span class="comment"># 速度(km/h)</span></span><br><span class="line">day, month, year = bds.date[:] <span class="comment"># 日期(UTC+8)；日，月，年</span></span><br><span class="line">hour, minute, second = bds.timestamp[:] <span class="comment"># 时间戳(UTC+8)；时，分，秒</span></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="按键检测"><a href="#按键检测" class="headerlink" title="按键检测"></a>按键检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> button1, button2</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> button1.is_press():  <span class="comment"># 检测到按键按下</span></span><br><span class="line">        time.sleep_ms(<span class="number">10</span>)  <span class="comment"># 延时消抖</span></span><br><span class="line">        <span class="keyword">if</span> button1.is_press():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;button 1 press&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> (button1.is_press()):  <span class="comment"># 等待按键释放</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> button2.is_press():  <span class="comment"># 检测到按键按下</span></span><br><span class="line">        time.sleep_ms(<span class="number">10</span>)  <span class="comment"># 延时消抖</span></span><br><span class="line">        <span class="keyword">if</span> button2.is_press():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;button 2 press&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> (button2.is_press()):  <span class="comment"># 等待按键释放</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="鸣响测试"><a href="#鸣响测试" class="headerlink" title="鸣响测试"></a>鸣响测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> buzzer</span><br><span class="line"></span><br><span class="line">tone_list = (<span class="number">289</span>, <span class="number">661</span>, <span class="number">700</span>, <span class="number">786</span>, <span class="number">882</span>, <span class="number">990</span>, <span class="number">1112</span>)  <span class="comment"># Do、Re、Mi、Fa、Sol、La、Si</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    buzzer.tone(tone_list[i])</span><br><span class="line">    time.sleep_ms(<span class="number">500</span>)</span><br><span class="line">    buzzer.no_tone()</span><br></pre></td></tr></table></figure><h2 id="绘图测试"><a href="#绘图测试" class="headerlink" title="绘图测试"></a>绘图测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入显示模块</span></span><br><span class="line"><span class="keyword">import</span> lcd</span><br><span class="line"><span class="comment"># 设置背光亮度</span></span><br><span class="line">lcd.set_backlight(<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 清空显示</span></span><br><span class="line">lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 设置显示方向</span></span><br><span class="line">lcd.rotation(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 画线</span></span><br><span class="line">lcd.draw_line(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>, color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 画矩形</span></span><br><span class="line">lcd.draw_rectangle(<span class="number">100</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">60</span>, color=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=<span class="number">8</span>, fill=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 画圆形，实心</span></span><br><span class="line">lcd.draw_circle(<span class="number">120</span>, <span class="number">160</span>, <span class="number">30</span>, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">1</span>, fill=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 显示字符</span></span><br><span class="line">lcd.draw_string(<span class="number">100</span>, <span class="number">200</span>, <span class="string">&quot;lcd draw test&quot;</span>, fc=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出显示</span></span><br><span class="line">lcd.display()</span><br></pre></td></tr></table></figure><h2 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> rgb_led  <span class="comment"># 导入模块</span></span><br><span class="line"></span><br><span class="line">rgb = rgb_led(<span class="number">1</span>)  <span class="comment"># 端口1</span></span><br><span class="line">rgb.<span class="built_in">set</span>(<span class="number">0</span>, (<span class="number">50</span>, <span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># 将第1个灯设置为红色亮度值为：50</span></span><br><span class="line">rgb.<span class="built_in">set</span>(<span class="number">1</span>, (<span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>))  <span class="comment"># 将第2个灯设置为绿色亮度值为：60</span></span><br><span class="line">rgb.<span class="built_in">set</span>(<span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">70</span>))  <span class="comment"># 将第3个灯设置为蓝色亮度值为：70</span></span><br><span class="line">rgb.display()  <span class="comment"># 输出显示</span></span><br><span class="line">time.sleep_ms(<span class="number">1000</span>)</span><br><span class="line">color = ((<span class="number">50</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    rgb.<span class="built_in">set</span>(<span class="number">0</span>, color[i])</span><br><span class="line">    rgb.<span class="built_in">set</span>(<span class="number">1</span>, color[i])</span><br><span class="line">    rgb.<span class="built_in">set</span>(<span class="number">2</span>, color[i])</span><br><span class="line">    rgb.display()</span><br><span class="line">    time.sleep_ms(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h2 id="按键状态检测"><a href="#按键状态检测" class="headerlink" title="按键状态检测"></a>按键状态检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> button_group  <span class="comment"># 导入按键模块</span></span><br><span class="line"></span><br><span class="line">bt2 = button_group(<span class="number">2</span>)  <span class="comment"># 按键模块连接到端口2while True:</span></span><br><span class="line"><span class="keyword">if</span> bt2.is_press(<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;press&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;release&quot;</span>)</span><br><span class="line">time.sleep_ms(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="按键控制开关灯"><a href="#按键控制开关灯" class="headerlink" title="按键控制开关灯"></a>按键控制开关灯</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> button_group, rgb_led</span><br><span class="line"></span><br><span class="line">rgb = rgb_led(<span class="number">1</span>)</span><br><span class="line">bt2 = button_group(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> bt2.is_press(<span class="number">1</span>):  <span class="comment"># 检测到按键1按下</span></span><br><span class="line">        time.sleep_ms(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> bt2.is_press(<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;button 1 press&quot;</span>)</span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">0</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            rgb.display()</span><br><span class="line">        <span class="keyword">while</span> bt2.is_press(<span class="number">1</span>):  <span class="comment"># 等待按键1释放</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> bt2.is_press(<span class="number">2</span>):  <span class="comment"># 检测到按键2按下</span></span><br><span class="line">        time.sleep_ms(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> bt2.is_press(<span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;button 2 press&quot;</span>)</span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">0</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">            rgb.display()</span><br><span class="line">        <span class="keyword">while</span> bt2.is_press(<span class="number">2</span>):  <span class="comment"># 等待按键2释放</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="数值读取"><a href="#数值读取" class="headerlink" title="数值读取"></a>数值读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> potentiometer</span><br><span class="line"></span><br><span class="line">p = potentiometer(<span class="number">3</span>)  <span class="comment"># 电位器连接 端口3</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;val: &quot;</span>, p.read())</span><br><span class="line">    time.sleep_ms(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="超声波测距"><a href="#超声波测距" class="headerlink" title="超声波测距"></a>超声波测距</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">us_sensor = ultrasonic(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    us_sensor.measure()  <span class="comment"># 触发测量</span></span><br><span class="line">    time.sleep_ms(<span class="number">100</span>)  <span class="comment"># 等待测量完成</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;distance: %.1fcm\r\n&quot;</span> % us_sensor.read())  <span class="comment"># 读取测量结果</span></span><br><span class="line">    time.sleep_ms(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><h2 id="温湿度读取显示"><a href="#温湿度读取显示" class="headerlink" title="温湿度读取显示"></a>温湿度读取显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> lcd</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> th_sensor</span><br><span class="line"></span><br><span class="line">th = th_sensor(<span class="number">5</span>)</span><br><span class="line">lcd.rotation(<span class="number">1</span>)</span><br><span class="line">lcd.clear(color=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    info = <span class="string">&quot;temperature: %.1fC  humidity: %d%%&quot;</span> % (th.read_temperature(),</span><br><span class="line">                                                   th.read_humidity())</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br><span class="line">    lcd.clear(color=<span class="number">0</span>)</span><br><span class="line">    lcd.draw_string(<span class="number">10</span>, <span class="number">16</span>, info, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    lcd.display()</span><br><span class="line">    time.sleep_ms(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="调速风扇"><a href="#调速风扇" class="headerlink" title="调速风扇"></a>调速风扇</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = potentiometer(<span class="number">3</span>)  <span class="comment"># 电位器连接 端口3</span></span><br><span class="line">m = motor_fan(<span class="number">6</span>)  <span class="comment"># 电机风扇模块连接 端口6</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    val = p.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;speed: %d%%&quot;</span> % val)</span><br><span class="line">    m.<span class="built_in">set</span>(val)</span><br><span class="line">    time.sleep_ms(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="语音识别开关灯"><a href="#语音识别开关灯" class="headerlink" title="语音识别开关灯"></a>语音识别开关灯</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">rgb = rgb_led(<span class="number">1</span>)</span><br><span class="line">asr = asr(<span class="number">7</span>) <span class="comment"># 语音识别模块连接 端口7</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = asr.read() <span class="comment"># 读取语音识别结果</span></span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) : <span class="comment"># 非 0 为语音识别到唤醒词或命令词</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;recive cmd: &quot;</span>, res)</span><br><span class="line">        <span class="keyword">if</span> res == <span class="number">22</span> <span class="keyword">or</span> res == <span class="number">23</span> :  <span class="comment"># 对应命令词：开灯，打开灯</span></span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">0</span>, (<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>))</span><br><span class="line">            rgb.display()</span><br><span class="line">        <span class="keyword">elif</span> res == <span class="number">25</span> <span class="keyword">or</span> res == <span class="number">26</span> :  <span class="comment"># 对应命令词：关灯，关闭灯</span></span><br><span class="line">            rgb.<span class="built_in">set</span>(<span class="number">0</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">            rgb.display()</span><br><span class="line">    time.sleep_ms(<span class="number">100</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, lcd</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dev = enlighten_com(<span class="number">1</span>)  <span class="comment"># 启蒙模块连接到端口1</span></span><br><span class="line">dev.wait_connect()  <span class="comment"># 等待模块链连接</span></span><br><span class="line">dev.set_mode(<span class="string">&quot;qrcode scan&quot;</span>)  <span class="comment"># 设为二维码扫描模式</span></span><br><span class="line">lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.rotation(<span class="number">0</span>)</span><br><span class="line">lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;二维码扫描&quot;</span>, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.display()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> dev.request_data(<span class="string">&quot;qrcode&quot;</span>):  <span class="comment"># 请求二维码扫描结果</span></span><br><span class="line">        info = dev.read_qrcode_info()</span><br><span class="line">        lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, info, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.display()</span><br><span class="line">    time.sleep_ms(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="口罩检测"><a href="#口罩检测" class="headerlink" title="口罩检测"></a>口罩检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, lcd</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dev = enlighten_com(<span class="number">1</span>)  <span class="comment"># 启蒙模块连接到端口1</span></span><br><span class="line">dev.wait_connect()  <span class="comment"># 等待模块链连接</span></span><br><span class="line">dev.set_mode(<span class="string">&quot;mask detect&quot;</span>)  <span class="comment"># 设为口罩检测</span></span><br><span class="line">tts = tts(<span class="number">7</span>)</span><br><span class="line">lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.rotation(<span class="number">0</span>)</span><br><span class="line">lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;口罩检测提醒&quot;</span>, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.display()</span><br><span class="line">last_play_time = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> dev.request_data(<span class="string">&quot;mask detect&quot;</span>):  <span class="comment"># 请求口罩检测结果</span></span><br><span class="line">        res = dev.read_detect_info()</span><br><span class="line">        classid = res[<span class="number">4</span>]  <span class="comment"># 分类结果</span></span><br><span class="line">        conf = res[<span class="number">5</span>]  <span class="comment"># 可信度</span></span><br><span class="line">        <span class="keyword">if</span> (classid == <span class="number">0</span>):</span><br><span class="line">            info = <span class="string">&quot;请你带好口罩&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没戴口罩，可信度%d%%&quot;</span> % (conf * <span class="number">100</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            info = <span class="string">&quot;你好&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;戴了口罩，可信度%d%%&quot;</span> % (conf * <span class="number">100</span>))</span><br><span class="line">        delta = time.ticks_diff(time.ticks_ms(), last_play_time)</span><br><span class="line">        <span class="keyword">if</span> (delta &gt; <span class="number">2000</span>):  <span class="comment"># 播放间隔大于2S</span></span><br><span class="line">            tts.play(info)  <span class="comment"># 语音播报</span></span><br><span class="line">            last_play_time = time.ticks_ms()</span><br><span class="line">        lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, info, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.display()</span><br><span class="line">    time.sleep_ms(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="图像检测分类"><a href="#图像检测分类" class="headerlink" title="图像检测分类"></a>图像检测分类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, lcd</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dev = enlighten_com(<span class="number">1</span>)  <span class="comment"># 启蒙模块连接到端口1</span></span><br><span class="line">dev.wait_connect()  <span class="comment"># 等待模块链连接</span></span><br><span class="line">dev.set_mode(<span class="string">&quot;image class&quot;</span>)  <span class="comment"># 设为图像分类</span></span><br><span class="line">tts = tts(<span class="number">7</span>)</span><br><span class="line">lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.rotation(<span class="number">0</span>)</span><br><span class="line">lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;图像识别分类&quot;</span>, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">lcd.display()</span><br><span class="line"><span class="comment"># 20class 分类的分类标签</span></span><br><span class="line">label = (<span class="string">&quot;飞机&quot;</span>, <span class="string">&quot;自行车&quot;</span>, <span class="string">&quot;小鸟&quot;</span>, <span class="string">&quot;轮船&quot;</span>, <span class="string">&quot;瓶子&quot;</span>, <span class="string">&quot;公共汽车&quot;</span>, <span class="string">&quot;汽车&quot;</span>, <span class="string">&quot;猫&quot;</span>, <span class="string">&quot;椅子&quot;</span>, <span class="string">&quot;牛&quot;</span>,  \</span><br><span class="line">         <span class="string">&quot;餐桌&quot;</span>, <span class="string">&quot;狗&quot;</span>, <span class="string">&quot;马&quot;</span>, <span class="string">&quot;摩托车&quot;</span>, <span class="string">&quot;人&quot;</span>, <span class="string">&quot;花盆&quot;</span>, <span class="string">&quot;羊&quot;</span>, <span class="string">&quot;沙发&quot;</span>, <span class="string">&quot;火车&quot;</span>, <span class="string">&quot;电视&quot;</span>)</span><br><span class="line">last_play_time = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> dev.request_data(<span class="string">&quot;image class&quot;</span>):  <span class="comment"># 请求二维码扫描结果</span></span><br><span class="line">        res = dev.read_detect_info()</span><br><span class="line">        info = <span class="string">&quot;识别为: %s, 可信度: %d%%&quot;</span> % (label[res[<span class="number">4</span>]], res[<span class="number">5</span>] * <span class="number">100</span>)</span><br><span class="line">        delta = time.ticks_diff(time.ticks_ms(), last_play_time)</span><br><span class="line">        <span class="keyword">if</span> (delta &gt; <span class="number">2000</span>):  <span class="comment"># 播放间隔大于2S</span></span><br><span class="line">            tts.play(label[res[<span class="number">4</span>]])  <span class="comment"># 语音播报</span></span><br><span class="line">            last_play_time = time.ticks_ms()</span><br><span class="line">        lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>, <span class="number">10</span>, info, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.display()</span><br><span class="line">    time.sleep_ms(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="颜色识别"><a href="#颜色识别" class="headerlink" title="颜色识别"></a>颜色识别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, lcd</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dev = enlighten_com(<span class="number">1</span>)  <span class="comment"># 启蒙模块连接到端口1</span></span><br><span class="line">dev.wait_connect()  <span class="comment"># 等待模块链连接</span></span><br><span class="line">dev.set_mode(<span class="string">&quot;color recognition&quot;</span>)  <span class="comment"># 设为颜色识别描模式</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> dev.request_data(<span class="string">&quot;red blob&quot;</span>):  <span class="comment"># 请求红色色块结果</span></span><br><span class="line">        x, y, w, h, pixels = dev.read_blob_info()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;coordiante: %d, %d pixels: %d&quot;</span> % (x, y, pixels))</span><br><span class="line">    time.sleep_ms(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="信息读取显示"><a href="#信息读取显示" class="headerlink" title="信息读取显示"></a>信息读取显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lcd, time, math, _thread</span><br><span class="line"><span class="keyword">from</span> openaie <span class="keyword">import</span> rf, bds, get_port_pin</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> 时区转换 </span></span><br><span class="line"><span class="string"> @dt: 日期时间 格式[year, month, day, hour, minute, second]</span></span><br><span class="line"><span class="string"> @timezone: 时区 默认为东8区，即北京时间  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">datetime</span>(<span class="params">dt, timezone=<span class="number">8</span></span>):</span><br><span class="line">    year, month, day, hour, minute, second = dt[:]</span><br><span class="line">    month_day = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span>:  <span class="comment"># 闰年判断</span></span><br><span class="line">        month_day[<span class="number">1</span>] = <span class="number">29</span></span><br><span class="line">    hour += timezone</span><br><span class="line">    <span class="keyword">if</span> hour &gt;= <span class="number">24</span>:</span><br><span class="line">        hour -= <span class="number">24</span></span><br><span class="line">        day += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> day &gt; month_day[month - <span class="number">1</span>]:</span><br><span class="line">            day -= month_day[month - <span class="number">1</span>]</span><br><span class="line">            month += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> month &gt; <span class="number">12</span>:</span><br><span class="line">                month = <span class="number">1</span></span><br><span class="line">                year += <span class="number">1</span></span><br><span class="line">    date_string = <span class="string">&quot;%04d/%02d/%02d&quot;</span> % (year, month, day)</span><br><span class="line">    time_string = <span class="string">&quot;%02d:%02d:%02d &quot;</span> % (hour, minute, second)</span><br><span class="line">    <span class="comment">#print(date_string, &#x27; &#x27;, time_string)</span></span><br><span class="line">    <span class="keyword">return</span> [year, month, day, hour, minute, second]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示屏设置</span></span><br><span class="line">lcd.set_backlight(<span class="number">50</span>)</span><br><span class="line">lcd.rotation(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">my_gps = bds(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">deadline = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    my_gps.update()</span><br><span class="line">    <span class="keyword">if</span> time.ticks_diff(deadline, time.ticks_ms()) &lt; <span class="number">0</span>:</span><br><span class="line">        deadline = time.ticks_add(time.ticks_ms(), <span class="number">500</span>)  <span class="comment"># 显示刷新间隔 500ms</span></span><br><span class="line"></span><br><span class="line">        lcd.clear(color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">72</span>, <span class="number">5</span>, <span class="string">&#x27;卫星定位授时&#x27;</span>, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 显示日期时间</span></span><br><span class="line">        day, month, year = my_gps.date[:]  <span class="comment"># 获取日期（UTC）</span></span><br><span class="line">        hour, minute, second = my_gps.timestamp[:]  <span class="comment"># 获取时间（UTC）</span></span><br><span class="line">        year, month, day, hour, minute, second = datetime(</span><br><span class="line">            [year + <span class="number">2000</span>, month, day, hour, minute, second])[:]  <span class="comment"># 时区转换</span></span><br><span class="line">        date_string = <span class="string">&quot;%04d/%02d/%02d&quot;</span> % (year, month, day)</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>, <span class="number">40</span>, date_string, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        time_string = <span class="string">&quot;%02d:%02d:%02d &quot;</span> % (hour, minute, second)</span><br><span class="line">        lcd.draw_string(<span class="number">110</span>, <span class="number">40</span>, time_string, fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 卫星信息</span></span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">75</span>,</span><br><span class="line">                        <span class="string">&#x27;可见卫星: %s 颗&#x27;</span> % my_gps.satellites_in_view,</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">95</span>,</span><br><span class="line">                        <span class="string">&#x27;使用卫星: %s 颗&#x27;</span> % my_gps.satellites_in_use,</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 位置</span></span><br><span class="line">        longitude = my_gps.longitude[<span class="number">0</span>]</span><br><span class="line">        latitude = my_gps.latitude[<span class="number">0</span>]</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">115</span>,</span><br><span class="line">                        <span class="string">&#x27;经度: %s&#x27;</span> % longitude,</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">135</span>,</span><br><span class="line">                        <span class="string">&#x27;纬度: %s&#x27;</span> % latitude,</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">155</span>,</span><br><span class="line">                        <span class="string">&#x27;海拔: %d m&#x27;</span> % my_gps.altitude,</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.draw_string(<span class="number">10</span>,</span><br><span class="line">                        <span class="number">175</span>,</span><br><span class="line">                        <span class="string">&#x27;速度: %.2f km/h&#x27;</span> % my_gps.speed[<span class="number">2</span>],</span><br><span class="line">                        fc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                        bc=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        lcd.display()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;板载按键&quot;&gt;&lt;a href=&quot;#板载按键&quot; class=&quot;headerlink&quot; title=&quot;板载按键&quot;&gt;&lt;/a&gt;板载按键&lt;/h1&gt;&lt;p&gt;&lt;em&gt;板载两个用户按键 button1 和 button2，按键按下为低电平，弹起为高电平。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; openaie &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; button1, button2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button1.is_press()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button2.is_press()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按键按下返回 True，按键弹起返回 False。&lt;/p&gt;
&lt;h1 id=&quot;板载无源蜂鸣器&quot;&gt;&lt;a href=&quot;#板载无源蜂鸣器&quot; class=&quot;headerlink&quot; title=&quot;板载无源蜂鸣器&quot;&gt;&lt;/a&gt;板载无源蜂鸣器&lt;/h1&gt;&lt;p&gt;可通过不同频率的信号驱动，发出不同音调的声音。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; openaie &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; buzzer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buzzer.tone(freq)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buzzer.no_tone()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;freq: 频率。&lt;/p&gt;</summary>
    
    
    
    <category term="套件" scheme="http://caffptrx.github.io/categories/%E5%A5%97%E4%BB%B6/"/>
    
    
    <category term="Python" scheme="http://caffptrx.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Search Icon 问题</title>
    <link href="http://caffptrx.github.io/2022/05/14/search-icon-problem/"/>
    <id>http://caffptrx.github.io/2022/05/14/search-icon-problem/</id>
    <published>2022-05-14T03:59:55.000Z</published>
    <updated>2022-06-18T05:13:35.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用 Local Search 时，搜索图标会遇到这种问题</p><img src="/2022/05/14/search-icon-problem/prob-pic.png" class="" title="一直转圈的图标"><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在博客根目录下的 <code>_config.yml</code> 修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.json // 官方教程的文件名为 search.xml，这就是错误点</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;在使用 Local Search 时，搜索图标会遇到这种问题&lt;/p&gt;
&lt;img src=&quot;/2022/05/14/searc</summary>
      
    
    
    
    <category term="开发" scheme="http://caffptrx.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Hexo" scheme="http://caffptrx.github.io/tags/Hexo/"/>
    
    <category term="NexT" scheme="http://caffptrx.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode P118</title>
    <link href="http://caffptrx.github.io/2022/05/12/lc118/"/>
    <id>http://caffptrx.github.io/2022/05/12/lc118/</id>
    <published>2022-05-12T15:03:15.000Z</published>
    <updated>2022-05-14T03:34:38.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题概括"><a href="#问题概括" class="headerlink" title="问题概括"></a>问题概括</h2><p>给定一个非负整数 <code>numRows</code>，生成杨辉三角的前<code>numRows</code>行。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>杨辉三角的前两行是固定的（意思为从第三行起中间的数是可以通过计算得出的），通过一个循环生成行，再利用另外一个循环生成数字。</p><span id="more"></span><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self, numRows: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">list</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        result = [[<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numRows-<span class="number">1</span>):</span><br><span class="line">            colNum = [<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result[col])):</span><br><span class="line">                <span class="keyword">if</span> num == <span class="built_in">len</span>(result[col]) - <span class="number">1</span>:</span><br><span class="line">                    colNum.append(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                colNum.append(result[col][num] + result[col][num+<span class="number">1</span>])</span><br><span class="line">            result.append(colNum)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="原题目链接"><a href="#原题目链接" class="headerlink" title="原题目链接"></a><a href="https://leetcode.cn/problems/pascals-triangle/">原题目链接</a></h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题概括&quot;&gt;&lt;a href=&quot;#问题概括&quot; class=&quot;headerlink&quot; title=&quot;问题概括&quot;&gt;&lt;/a&gt;问题概括&lt;/h2&gt;&lt;p&gt;给定一个非负整数 &lt;code&gt;numRows&lt;/code&gt;，生成杨辉三角的前&lt;code&gt;numRows&lt;/code&gt;行。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;杨辉三角的前两行是固定的（意思为从第三行起中间的数是可以通过计算得出的），通过一个循环生成行，再利用另外一个循环生成数字。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://caffptrx.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://caffptrx.github.io/tags/Python/"/>
    
    <category term="循环" scheme="http://caffptrx.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用 SSH 连接到 GitHub</title>
    <link href="http://caffptrx.github.io/2021/11/04/ssh/"/>
    <id>http://caffptrx.github.io/2021/11/04/ssh/</id>
    <published>2021-11-04T10:50:42.000Z</published>
    <updated>2022-05-14T03:35:51.473Z</updated>
    
    <content type="html"><![CDATA[<p style="font-weight: bold; color: #dc143c;">注意！本教程的教学环境都基于 Windows 10，但过程大致相同，针对不同的终端，请使用不同的命令完成相同的操作。</p><h3 id="生成新-SSH-密钥"><a href="#生成新-SSH-密钥" class="headerlink" title="生成新 SSH 密钥"></a>生成新 SSH 密钥</h3><p>在 Git Bash 下输入命令，<strong>将 <a href="mailto:&#x79;&#111;&#117;&#x72;&#95;&#x65;&#x6d;&#x61;&#105;&#108;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#111;&#117;&#x72;&#95;&#x65;&#x6d;&#x61;&#105;&#108;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a> 替换为你的邮件地址</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>如果不支持 ED25519 算法，使用以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></blockquote><p>如果创建成功，将提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Generating public/private algorithm key pair.</span><br></pre></td></tr></table></figure><p>提示 <code>Enter a file in which to save the key.</code> (输入要保存密钥的文件) 时，按 <em>Enter</em> 键，将密钥创建在默认位置。</p><p>出现如下代码时，输入安全密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty for no passphrase):</span><br><span class="line">&gt; Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>连续按下两次 Enter 键将创建空密码。</p><span id="more"></span><h3 id="将-SSH-密钥添加至-ssh-agent"><a href="#将-SSH-密钥添加至-ssh-agent" class="headerlink" title="将 SSH 密钥添加至 ssh-agent"></a>将 SSH 密钥添加至 ssh-agent</h3><p>确保 ssh-agent 正在运行，或者手动启动它:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><p>将 SSH 私钥添加至 ssh-agent，如果你创建了或者需要添加不同名称的密钥，把命令中的 <em>id_ed22519</em> 替换为你的私钥文件的名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_ed22519</span><br></pre></td></tr></table></figure><h3 id="将-SSH-密钥添加至-GitHub-账户"><a href="#将-SSH-密钥添加至-GitHub-账户" class="headerlink" title="将 SSH 密钥添加至 GitHub 账户"></a>将 SSH 密钥添加至 GitHub 账户</h3><ol><li><p>复制 SSH 公钥。<br>如果你的 SSH 公钥文件与以下代码不同，请修改文件名以匹配设置。在复制密钥时，请勿添加任何字符、新行或空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_ed22519.pub</span><br></pre></td></tr></table></figure><p>如果 <code>clip</code> 不可用，找到隐藏的 <code>.ssh</code> 文件夹，在编辑器中打开你的公钥文件并将其里面的内容复制到剪贴板。</p></li><li><p>进入 <a href="https://github.com/">GitHub 官网</a>，在任何界面的右上角点击你的头像，然后点击 <em>Settings</em>。</p></li><li><p>在用户设置侧边栏中，找到并点击 <em>SSH and GPG keys</em>。</p></li><li><p>点击 <em>New SSH Key 或 Add SSH key</em>。</p></li><li><p>在 <em>Title</em> 字段中，为新的密钥添加标签。</p></li><li><p>将密钥粘贴到 <em>Key</em> 字段中。</p></li><li><p>点击 <em>Add SSH Key</em>。</p></li><li><p>如有提示，确认你的 GitHub 密码。</p></li></ol><h3 id="测试-SSH-连接"><a href="#测试-SSH-连接" class="headerlink" title="测试 SSH 连接"></a>测试 SSH 连接</h3><p>输入以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><blockquote><p>可能会出现如下的警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; The authenticity of host &#x27;github.com (IP ADDRESS)&#x27; can&#x27;t be established.</span><br><span class="line">&gt; RSA key fingerprint is SHA256: (GitHub PUBLIC FINGERPRINT).</span><br><span class="line">&gt; Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>验证所看到消息中的指纹是否与 <a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints">GitHub 的 RSA 公钥指纹</a> 匹配，如果是，则输入 <code>yes</code>:</p></blockquote><p>如果连接成功，会出现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hi username! You&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="line">&gt; provide shell access.</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>Git Bash 错误 <code>ssh: connect to host localhost port (PORT_NUMBER): Connection refused.</code><br>以下是可能的原因<ul><li><p>端口未打开或被占用<br>  打开 CMD 终端，输入以下命令，<strong>将 port_number 替换为错误消息中的端口号</strong>:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr &quot;port_number&quot;</span><br></pre></td></tr></table></figure><p>  找到正在监听对应端口的进程的 PID，输入以下命令查看对应进程的进程名，<strong>将 processid 替换为对应进程的 PID</strong>:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr &quot;processid&quot;</span><br></pre></td></tr></table></figure><p>  如果结束此程序并无大碍，输入以下命令，<strong>将 processid 替换为对应进程的 PID</strong>:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid &quot;processid&quot;</span><br></pre></td></tr></table></figure><p>  随后重新尝试连接。</p></li><li><p>本地防火墙拒绝</p></li><li><p>本机无 SSH 服务</p><ol><li>打开 <em>设置</em>，点击窗口中的 <em>应用</em> 图标。</li><li>在窗口中，点击左侧的 <em>应用和功能</em>，然后再在右侧窗口中点击 <em>管理可选功能</em> 快捷连接。</li><li>点击 <em>添加功能</em>，选择 <em>OpenSSH Client</em>，在弹出的窗口中点击 <em>安装</em>。<br>  随后重新尝试连接。</li></ol></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;font-weight: bold; color: #dc143c;&quot;&gt;
注意！本教程的教学环境都基于 Windows 10，但过程大致相同，针对不同的终端，请使用不同的命令完成相同的操作。
&lt;/p&gt;

&lt;h3 id=&quot;生成新-SSH-密钥&quot;&gt;&lt;a href=&quot;#生成新-SSH-密钥&quot; class=&quot;headerlink&quot; title=&quot;生成新 SSH 密钥&quot;&gt;&lt;/a&gt;生成新 SSH 密钥&lt;/h3&gt;&lt;p&gt;在 Git Bash 下输入命令，&lt;strong&gt;将 &lt;a href=&quot;mailto:&amp;#x79;&amp;#111;&amp;#117;&amp;#x72;&amp;#95;&amp;#x65;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#64;&amp;#x65;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&quot;&gt;&amp;#x79;&amp;#111;&amp;#117;&amp;#x72;&amp;#95;&amp;#x65;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#64;&amp;#x65;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt; 替换为你的邮件地址&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t ed25519 -C &amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不支持 ED25519 算法，使用以下命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果创建成功，将提示:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Generating public/private algorithm key pair.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;提示 &lt;code&gt;Enter a file in which to save the key.&lt;/code&gt; (输入要保存密钥的文件) 时，按 &lt;em&gt;Enter&lt;/em&gt; 键，将密钥创建在默认位置。&lt;/p&gt;
&lt;p&gt;出现如下代码时，输入安全密码。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Enter passphrase (empty for no passphrase):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Enter same passphrase again:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;连续按下两次 Enter 键将创建空密码。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://caffptrx.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="SSH" scheme="http://caffptrx.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode P20</title>
    <link href="http://caffptrx.github.io/2021/10/13/lc20/"/>
    <id>http://caffptrx.github.io/2021/10/13/lc20/</id>
    <published>2021-10-13T02:41:12.000Z</published>
    <updated>2022-05-14T03:34:25.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题概括"><a href="#问题概括" class="headerlink" title="问题概括"></a>问题概括</h2><p>给你一个有序数组 <code>nums</code>，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong>，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在使用<code>O(1)</code>额外空间的条件下完成。</p><span id="more"></span><p>说明:<br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以 <strong>“引用”</strong> 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题目，我们可以通过 <code>fast</code> 和 <code>slow</code> 两个指针来判断元素是否重复。<br>指针 <code>fast</code> 负责遍历整个数组，指针 <code>slow</code> 负责与 <code>fast</code> 进行比较。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        fast = slow = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> fast &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[fast] != nums[fast - <span class="number">1</span>]:</span><br><span class="line">                nums[slow] = nums[fast]</span><br><span class="line">                slow += <span class="number">1</span></span><br><span class="line">            fast += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure><h2 id="原题目链接"><a href="#原题目链接" class="headerlink" title="原题目链接"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">原题目链接</a></h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题概括&quot;&gt;&lt;a href=&quot;#问题概括&quot; class=&quot;headerlink&quot; title=&quot;问题概括&quot;&gt;&lt;/a&gt;问题概括&lt;/h2&gt;&lt;p&gt;给你一个有序数组 &lt;code&gt;nums&lt;/code&gt;，请你 &lt;strong&gt;原地&lt;/strong&gt; 删除重复出现的元素，使每个元素 &lt;strong&gt;只出现一次&lt;/strong&gt;，返回删除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在使用&lt;code&gt;O(1)&lt;/code&gt;额外空间的条件下完成。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://caffptrx.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://caffptrx.github.io/tags/Python/"/>
    
    <category term="双指针" scheme="http://caffptrx.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode P2283</title>
    <link href="http://caffptrx.github.io/2021/10/12/lc2283/"/>
    <id>http://caffptrx.github.io/2021/10/12/lc2283/</id>
    <published>2021-10-12T13:33:53.000Z</published>
    <updated>2022-05-14T03:35:19.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题概括"><a href="#问题概括" class="headerlink" title="问题概括"></a>问题概括</h2><p>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题目可知</p><ol><li>s1 与 s2 的长度应相同</li><li>s1 与 s2 的每个字符出现次数应相同</li><li>s2 无法出现 s1 不包含的字符</li></ol><span id="more"></span><p>(以我的水平) 可以想出两种办法</p><ul><li>利用哈希表存储字符串的每个字符以及此字符的出现次数</li><li>重新排序字符串后比较两个字符串<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="哈希表，Python"><a href="#哈希表，Python" class="headerlink" title="哈希表，Python"></a>哈希表，Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">CheckPermutation</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s1) != <span class="built_in">len</span>(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        hashT1 = &#123;&#125;</span><br><span class="line">        hashT2 = &#123;&#125;</span><br><span class="line">        T1ch = []</span><br><span class="line">        T2ch = []</span><br><span class="line">        <span class="comment"># 建立 s1 的哈希表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> T1ch:</span><br><span class="line">                hashT1[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T1ch.append(i)</span><br><span class="line">                hashT1[i] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 建立 s2 的哈希表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">            <span class="comment"># s2 出现 s1 没有的字符</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> T1ch:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> T2ch:</span><br><span class="line">                hashT2[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T2ch.append(i)</span><br><span class="line">                hashT2[i] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 检查每个字符的出现次数</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> hashT1.keys():</span><br><span class="line">            <span class="keyword">if</span> hashT1[key] != hashT2[key]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="重排，C"><a href="#重排，C" class="headerlink" title="重排，C"></a>重排，C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">CheckPermutation</span><span class="params">(<span class="type">char</span>* s1, <span class="type">char</span>* s2)</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s1);</span><br><span class="line">    <span class="comment">// 重排 s1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[j] &lt; s1[f])</span><br><span class="line">                f = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != f)</span><br><span class="line">        &#123;</span><br><span class="line">            ch = s1[f];</span><br><span class="line">            s1[f] = s1[i];</span><br><span class="line">            s1[i] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ch = <span class="number">0</span>, f = <span class="number">0</span>, n = <span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="comment">// 重排 s2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s2[j] &lt; s2[f])</span><br><span class="line">                f = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != f)</span><br><span class="line">        &#123;</span><br><span class="line">            ch = s2[f];</span><br><span class="line">            s2[f] = s2[i];</span><br><span class="line">            s2[i] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 比较两个字符串</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">strcmp</span>(s1, s2) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重排，C-1"><a href="#重排，C-1" class="headerlink" title="重排，C++"></a>重排，C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">CheckPermutation</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> (s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="原题目链接"><a href="#原题目链接" class="headerlink" title="原题目链接"></a><a href="https://leetcode-cn.com/problems/check-permutation-lcci/">原题目链接</a></h3></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题概括&quot;&gt;&lt;a href=&quot;#问题概括&quot; class=&quot;headerlink&quot; title=&quot;问题概括&quot;&gt;&lt;/a&gt;问题概括&lt;/h2&gt;&lt;p&gt;给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;根据题目可知&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;s1 与 s2 的长度应相同&lt;/li&gt;
&lt;li&gt;s1 与 s2 的每个字符出现次数应相同&lt;/li&gt;
&lt;li&gt;s2 无法出现 s1 不包含的字符&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="算法" scheme="http://caffptrx.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://caffptrx.github.io/tags/Python/"/>
    
    <category term="C" scheme="http://caffptrx.github.io/tags/C/"/>
    
    <category term="C++" scheme="http://caffptrx.github.io/tags/C/"/>
    
    <category term="哈希表" scheme="http://caffptrx.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
</feed>
