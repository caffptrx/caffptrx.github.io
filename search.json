[{"title":"Leetcode P118","url":"/2022/05/12/lc118/","content":"<h2 id=\"问题概括\"><a href=\"#问题概括\" class=\"headerlink\" title=\"问题概括\"></a>问题概括</h2><p>给定一个非负整数 <code>numRows</code>，生成杨辉三角的前<code>numRows</code>行。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>杨辉三角的前两行是固定的（意思为从第三行起中间的数是可以通过计算得出的），通过一个循环生成行，再利用另外一个循环生成数字。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate</span>(<span class=\"params\">self, numRows: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">list</span>[<span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> numRows == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [[<span class=\"number\">1</span>]]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> numRows == <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [[<span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">        result = [[<span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, numRows-<span class=\"number\">1</span>):</span><br><span class=\"line\">            colNum = [<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(result[col])):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> num == <span class=\"built_in\">len</span>(result[col]) - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    colNum.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                colNum.append(result[col][num] + result[col][num+<span class=\"number\">1</span>])</span><br><span class=\"line\">            result.append(colNum)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"原题目链接\"><a href=\"#原题目链接\" class=\"headerlink\" title=\"原题目链接\"></a><a href=\"https://leetcode.cn/problems/pascals-triangle/\">原题目链接</a></h2>","categories":["算法"],"tags":["Python","循环"]},{"title":"Leetcode P121","url":"/2021/11/06/lc121/","content":"<h2 id=\"问题概括\"><a href=\"#问题概括\" class=\"headerlink\" title=\"问题概括\"></a>问题概括</h2><p>给定一个数组 <code>prices</code>，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>\n<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>\n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code>。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>暴力<br> 我们需要找出给定数组中两个数字之间的最大差值（即最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。<br> 也就是说对于每组 $i$ 和 $j$（其中 $i &lt; j$），我们需要找出 $\\max(prices[j] - prices[i])$。<br /><br> 时间复杂度: $O(n^2)$;<br> 空间复杂度: $O(1)$.</li>\n<li>一次遍历<br> 假设我们在第 <code>i</code> 天卖出股票，且需要最大差值（最大利润），那就是说需要在历史股票中的最低点购买。<br> 在本题中，我们可以使用一个变量 <code>minprice</code> 来记录最低价格，那么我们在第 <code>i</code> 天卖出股票所获得的利润就是 $price[i] - minprice$。<br> 在每一次循环时（每一天）考虑这天卖出股票获得的利润是否是最大的，当遍历完整个给定数组时，我们也就找到了最大利润。<br /><br> 时间复杂度: $O(n)$;<br> 空间复杂度: $O(1)$.</li>\n<li>动态规划 <em>(Dynamic Programming, DP)</em><br> 实际上方法二的思路是由动态规划演变而来的。<br> 因为我们需要始终保持差值最大化（利润最大化），所以 $dp[i]$ 表示前 $i$ 天的最大差值（最大利润），得:$$dp[i] &#x3D; \\max(dp[i-1], prices[i] - minprice)$$<br> 时间复杂度: $O(n)$;<br> 空间复杂度: $O(n)$.</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"暴力\"><a href=\"#暴力\" class=\"headerlink\" title=\"暴力\"></a>暴力</h3><h4 id=\"Python-1\"><a href=\"#Python-1\" class=\"headerlink\" title=\"Python #1\"></a>Python #1</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        retval = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">                retval = <span class=\"built_in\">max</span>(retval, prices[j] - prices[i])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retval</span><br></pre></td></tr></table></figure>\n<h4 id=\"Python-2\"><a href=\"#Python-2\" class=\"headerlink\" title=\"Python #2\"></a>Python #2</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        maxprofit = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(prices) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            maxprofit = prices[i] - <span class=\"built_in\">min</span>(prices[:i]) <span class=\"keyword\">if</span> prices[i] - <span class=\"built_in\">min</span>(prices[:i]) &gt; maxprofit <span class=\"keyword\">else</span> maxprofit</span><br><span class=\"line\">            <span class=\"comment\"># if prices[i] - min(prices[:i]) &gt; maxprofit:</span></span><br><span class=\"line\">            <span class=\"comment\">#     maxprofit = prices[i] - min(prices[:i])</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span> prices[])</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxprofit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; prices.length - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; prices.length; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">profit</span> <span class=\"operator\">=</span> prices[j] - prices[i];</span><br><span class=\"line\">                maxprofit = (profit &gt; maxprofit) ? profit : maxprofit;</span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                if (profit &gt; maxprofit)</span></span><br><span class=\"line\"><span class=\"comment\">                    maxprofit = profit;</span></span><br><span class=\"line\"><span class=\"comment\">                */</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;prices)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = (<span class=\"type\">int</span>)prices.<span class=\"built_in\">size</span>(), retval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">                retval = <span class=\"built_in\">max</span>(retval, prices[j] - prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一次遍历\"><a href=\"#一次遍历\" class=\"headerlink\" title=\"一次遍历\"></a>一次遍历</h3><h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        INF = <span class=\"built_in\">int</span>(<span class=\"number\">1e8</span>) <span class=\"comment\"># 由于 Python 没有整数上限，所以选取一个较大的数</span></span><br><span class=\"line\">        minprice = INF</span><br><span class=\"line\">        maxprofit = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> price <span class=\"keyword\">in</span> prices:</span><br><span class=\"line\">            maxprofit = <span class=\"built_in\">max</span>(price - minprice, maxprofit)</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(price, minprice)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java-1\"><a href=\"#Java-1\" class=\"headerlink\" title=\"Java\"></a>Java</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span> prices[])</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">minprice</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxprofit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; prices.length; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prices[i] &lt; minprice)</span><br><span class=\"line\">                minprice = prices[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prices[i] - minprice &gt; maxprofit)</span><br><span class=\"line\">                maxprofit = prices[i] - minprice;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C++\"></a>C++</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;prices)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> minprice = INT_MAX, maxprofit = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> price : prices)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxprofit = <span class=\"built_in\">max</span>(maxprofit, price - minprice);</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(price, minprice);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3><h4 id=\"Python-1\"><a href=\"#Python-1\" class=\"headerlink\" title=\"Python\"></a>Python</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        length = <span class=\"built_in\">len</span>(prices)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        minprice = prices[<span class=\"number\">0</span>]</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>] * length</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(minprice, prices[i])</span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>], prices[i] - minprice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><a href=\"#C-2\" class=\"headerlink\" title=\"C++\"></a>C++</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;prices)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> length = prices.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> minprice = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(length, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; length; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            minprice = <span class=\"built_in\">min</span>(minprice, prices[i]);</span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>], prices[i] - minprice);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原题目链接\"><a href=\"#原题目链接\" class=\"headerlink\" title=\"原题目链接\"></a><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">原题目链接</a></h3>","categories":["算法"],"tags":["Python","Java","C++","动态规划"]},{"title":"Leetcode P20","url":"/2021/10/13/lc20/","content":"<h2 id=\"问题概括\"><a href=\"#问题概括\" class=\"headerlink\" title=\"问题概括\"></a>问题概括</h2><p>给你一个有序数组 <code>nums</code>，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong>，返回删除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在使用<code>O(1)</code>额外空间的条件下完成。</p>\n<span id=\"more\"></span>\n\n<p>说明:<br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以 <strong>“引用”</strong> 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题目，我们可以通过 <code>fast</code> 和 <code>slow</code> 两个指针来判断元素是否重复。<br>指针 <code>fast</code> 负责遍历整个数组，指针 <code>slow</code> 负责与 <code>fast</code> 进行比较。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">removeDuplicates</span>(<span class=\"params\">self, nums: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        fast = slow = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast &lt; <span class=\"built_in\">len</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[fast] != nums[fast - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                nums[slow] = nums[fast]</span><br><span class=\"line\">                slow += <span class=\"number\">1</span></span><br><span class=\"line\">            fast += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow</span><br></pre></td></tr></table></figure>\n<h2 id=\"原题目链接\"><a href=\"#原题目链接\" class=\"headerlink\" title=\"原题目链接\"></a><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\">原题目链接</a></h2>","categories":["算法"],"tags":["Python","双指针"]},{"title":"Leetcode P2283","url":"/2021/10/12/lc2283/","content":"<h2 id=\"问题概括\"><a href=\"#问题概括\" class=\"headerlink\" title=\"问题概括\"></a>问题概括</h2><p>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题目可知</p>\n<ol>\n<li>s1 与 s2 的长度应相同</li>\n<li>s1 与 s2 的每个字符出现次数应相同</li>\n<li>s2 无法出现 s1 不包含的字符</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>(以我的水平) 可以想出两种办法</p>\n<ul>\n<li>利用哈希表存储字符串的每个字符以及此字符的出现次数</li>\n<li>重新排序字符串后比较两个字符串<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"哈希表，Python\"><a href=\"#哈希表，Python\" class=\"headerlink\" title=\"哈希表，Python\"></a>哈希表，Python</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">CheckPermutation</span>(<span class=\"params\">self, s1: <span class=\"built_in\">str</span>, s2: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s1) != <span class=\"built_in\">len</span>(s2):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        hashT1 = &#123;&#125;</span><br><span class=\"line\">        hashT2 = &#123;&#125;</span><br><span class=\"line\">        T1ch = []</span><br><span class=\"line\">        T2ch = []</span><br><span class=\"line\">        <span class=\"comment\"># 建立 s1 的哈希表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s1:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> T1ch:</span><br><span class=\"line\">                hashT1[i] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                T1ch.append(i)</span><br><span class=\"line\">                hashT1[i] = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 建立 s2 的哈希表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s2:</span><br><span class=\"line\">            <span class=\"comment\"># s2 出现 s1 没有的字符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> T1ch:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> T2ch:</span><br><span class=\"line\">                hashT2[i] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                T2ch.append(i)</span><br><span class=\"line\">                hashT2[i] = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查每个字符的出现次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> hashT1.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hashT1[key] != hashT2[key]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重排，C\"><a href=\"#重排，C\" class=\"headerlink\" title=\"重排，C\"></a>重排，C</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CheckPermutation</span><span class=\"params\">(<span class=\"type\">char</span>* s1, <span class=\"type\">char</span>* s2)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"type\">int</span> f;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(s1);</span><br><span class=\"line\">    <span class=\"comment\">// 重排 s1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1[j] &lt; s1[f])</span><br><span class=\"line\">                f = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ch = s1[f];</span><br><span class=\"line\">            s1[f] = s1[i];</span><br><span class=\"line\">            s1[i] = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ch = <span class=\"number\">0</span>, f = <span class=\"number\">0</span>, n = <span class=\"built_in\">strlen</span>(s2);</span><br><span class=\"line\">    <span class=\"comment\">// 重排 s2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s2[j] &lt; s2[f])</span><br><span class=\"line\">                f = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ch = s2[f];</span><br><span class=\"line\">            s2[f] = s2[i];</span><br><span class=\"line\">            s2[i] = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">strcmp</span>(s1, s2) == <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重排，C-1\"><a href=\"#重排，C-1\" class=\"headerlink\" title=\"重排，C++\"></a>重排，C++</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckPermutation</span><span class=\"params\">(string s1, string s2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s1.<span class=\"built_in\">begin</span>(), s1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s2.<span class=\"built_in\">begin</span>(), s2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (s1 == s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原题目链接\"><a href=\"#原题目链接\" class=\"headerlink\" title=\"原题目链接\"></a><a href=\"https://leetcode-cn.com/problems/check-permutation-lcci/\">原题目链接</a></h3></li>\n</ul>\n","categories":["算法"],"tags":["Python","C++","C","哈希表"]},{"title":"Search Icon 问题","url":"/2022/05/14/search-icon-problem/","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>在使用 Local Search 时，搜索图标会遇到这种问题</p>\n<img src=\"/2022/05/14/search-icon-problem/prob-pic.png\" class=\"\" title=\"一直转圈的图标\">\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>在博客根目录下的 <code>_config.yml</code> 修改配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json // 官方教程的文件名为 search.xml，这就是错误点</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>","categories":["开发"],"tags":["Hexo","NexT"]},{"title":"使用 SSH 连接到 GitHub","url":"/2021/11/04/ssh/","content":"<p style=\"font-weight: bold; color: #dc143c;\">\n注意！本教程的教学环境都基于 Windows 10，但过程大致相同，针对不同的终端，请使用不同的命令完成相同的操作。\n</p>\n\n<h3 id=\"生成新-SSH-密钥\"><a href=\"#生成新-SSH-密钥\" class=\"headerlink\" title=\"生成新 SSH 密钥\"></a>生成新 SSH 密钥</h3><p>在 Git Bash 下输入命令，<strong>将 <a href=\"mailto:&#121;&#111;&#117;&#x72;&#x5f;&#x65;&#109;&#x61;&#105;&#108;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#x6d;\">&#121;&#111;&#117;&#x72;&#x5f;&#x65;&#109;&#x61;&#105;&#108;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#x6d;</a> 替换为你的邮件地址</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不支持 ED25519 算法，使用以下命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>如果创建成功，将提示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; Generating public/private algorithm key pair.</span><br></pre></td></tr></table></figure>\n\n<p>提示 <code>Enter a file in which to save the key.</code> (输入要保存密钥的文件) 时，按 <em>Enter</em> 键，将密钥创建在默认位置。</p>\n<p>出现如下代码时，输入安全密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">&gt; Enter same passphrase again:</span><br></pre></td></tr></table></figure>\n<p>连续按下两次 Enter 键将创建空密码。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"将-SSH-密钥添加至-ssh-agent\"><a href=\"#将-SSH-密钥添加至-ssh-agent\" class=\"headerlink\" title=\"将 SSH 密钥添加至 ssh-agent\"></a>将 SSH 密钥添加至 ssh-agent</h3><p>确保 ssh-agent 正在运行，或者手动启动它:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure>\n<p>将 SSH 私钥添加至 ssh-agent，如果你创建了或者需要添加不同名称的密钥，把命令中的 <em>id_ed22519</em> 替换为你的私钥文件的名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_ed22519</span><br></pre></td></tr></table></figure>\n<h3 id=\"将-SSH-密钥添加至-GitHub-账户\"><a href=\"#将-SSH-密钥添加至-GitHub-账户\" class=\"headerlink\" title=\"将 SSH 密钥添加至 GitHub 账户\"></a>将 SSH 密钥添加至 GitHub 账户</h3><ol>\n<li><p>复制 SSH 公钥。<br>如果你的 SSH 公钥文件与以下代码不同，请修改文件名以匹配设置。在复制密钥时，请勿添加任何字符、新行或空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_ed22519.pub</span><br></pre></td></tr></table></figure>\n<p>如果 <code>clip</code> 不可用，找到隐藏的 <code>.ssh</code> 文件夹，在编辑器中打开你的公钥文件并将其里面的内容复制到剪贴板。</p>\n</li>\n<li><p>进入 <a href=\"https://github.com/\">GitHub 官网</a>，在任何界面的右上角点击你的头像，然后点击 <em>Settings</em>。</p>\n</li>\n<li><p>在用户设置侧边栏中，找到并点击 <em>SSH and GPG keys</em>。</p>\n</li>\n<li><p>点击 <em>New SSH Key 或 Add SSH key</em>。</p>\n</li>\n<li><p>在 <em>Title</em> 字段中，为新的密钥添加标签。</p>\n</li>\n<li><p>将密钥粘贴到 <em>Key</em> 字段中。</p>\n</li>\n<li><p>点击 <em>Add SSH Key</em>。</p>\n</li>\n<li><p>如有提示，确认你的 GitHub 密码。</p>\n</li>\n</ol>\n<h3 id=\"测试-SSH-连接\"><a href=\"#测试-SSH-连接\" class=\"headerlink\" title=\"测试 SSH 连接\"></a>测试 SSH 连接</h3><p>输入以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可能会出现如下的警告</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; The authenticity of host &#x27;github.com (IP ADDRESS)&#x27; can&#x27;t be established.</span><br><span class=\"line\">&gt; RSA key fingerprint is SHA256: (GitHub PUBLIC FINGERPRINT).</span><br><span class=\"line\">&gt; Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n<p>验证所看到消息中的指纹是否与 <a href=\"https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">GitHub 的 RSA 公钥指纹</a> 匹配，如果是，则输入 <code>yes</code>:</p>\n</blockquote>\n<p>如果连接成功，会出现:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; Hi username! You&#x27;ve successfully authenticated, but GitHub does not</span><br><span class=\"line\">&gt; provide shell access.</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ol>\n<li>Git Bash 错误 <code>ssh: connect to host localhost port (PORT_NUMBER): Connection refused.</code><br>以下是可能的原因<ul>\n<li><p>端口未打开或被占用<br>  打开 CMD 终端，输入以下命令，<strong>将 port_number 替换为错误消息中的端口号</strong>:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr &quot;port_number&quot;</span><br></pre></td></tr></table></figure>\n<p>  找到正在监听对应端口的进程的 PID，输入以下命令查看对应进程的进程名，<strong>将 processid 替换为对应进程的 PID</strong>:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tasklist | findstr &quot;processid&quot;</span><br></pre></td></tr></table></figure>\n<p>  如果结束此程序并无大碍，输入以下命令，<strong>将 processid 替换为对应进程的 PID</strong>:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">taskkill /pid &quot;processid&quot;</span><br></pre></td></tr></table></figure>\n<p>  随后重新尝试连接。</p>\n</li>\n<li><p>本地防火墙拒绝</p>\n</li>\n<li><p>本机无 SSH 服务</p>\n<ol>\n<li>打开 <em>设置</em>，点击窗口中的 <em>应用</em> 图标。</li>\n<li>在窗口中，点击左侧的 <em>应用和功能</em>，然后再在右侧窗口中点击 <em>管理可选功能</em> 快捷连接。</li>\n<li>点击 <em>添加功能</em>，选择 <em>OpenSSH Client</em>，在弹出的窗口中点击 <em>安装</em>。<br>  随后重新尝试连接。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n","categories":["开发"],"tags":["SSH"]}]